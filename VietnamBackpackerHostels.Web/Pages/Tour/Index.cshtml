@page "/explore/tour/{tourName}"
@model VietnamBackpackerHostels.Web.Pages.Tour.IndexModel

@section Styles {
    <style type="text/css">
        .tour-main-image {
            height: 400px;
            object-fit: cover;
        }

            .tour-main-image img {
                object-fit: cover;
            }

        .badge {
            white-space: unset;
        }
    </style>
}

@{
    ViewData["Title"] = Model.Tour.Name;

    <div class="custom-height mt-n5 py-5 bg-primary-dark">
        <div class="container py-5">
            <div class="row my-4">
                <div class="col-12 has-parallax-scroll">
                    <h1 class="display-4 fw-bold ls-tight text-white">Tours & Activities</h1>
                    <h4 class="mb-0 text-secondary">@Model.Tour.Name</h4>
                </div>
            </div>
        </div>
    </div>

    <div class="container custom-mt">
        <div class="row g-0 mb-3 align-items-center">
            <div class="col-lg-7 mb-4 mb-lg-0 has-parallax-scroll tour-main-image">
                <img src="@Model.Tour.ImagePath" class="w-100 rounded-6 h-100" alt="@Model.Tour.Name" />
            </div>
            <div class="col-lg-5">
                <div class="card cascading-left rounded-6 shadow-5 has-parallax-scroll">
                    <div class="card-body px-4 p-4 p-md-5 p-lg-4 p-xl-5">
                        @{
                            <div class="row g-0">
                                <div class="col-lg-8">
                                    <h3 class="mb-4 float-left text-black">@Model.Tour.Name</h3>

                                </div>
                                <div class="col-lg-4 mb-2 mb-lg-0 text-lg-end">
                                    <button type="button" class="btn btn-primary" data-mdb-toggle="modal" data-mdb-target="#enquireNowModal">
                                        Enquire now
                                    </button>
                                </div>
                            </div>

                            var tripInformationValues = new List<Tuple<string, string>>();

                            bool priceExists = Model.Tour.TourPrices != null && Model.Tour.TourPrices.Any();
                            bool minCapacityExists = Model.Tour.MinCapacity.HasValue;
                            bool maxCapacityExists = Model.Tour.MaxCapacity.HasValue;
                            bool addressExists = !string.IsNullOrEmpty(Model.Tour.Address);
                            bool telphoneNumberExists = !string.IsNullOrEmpty(Model.Tour.TelephoneNumber);
                            bool dayDurationExists = !string.IsNullOrEmpty(Model.Tour.DayDuration);
                            bool nightDurationExists = !string.IsNullOrEmpty(Model.Tour.NightDuration);
                            bool hourDurationExists = !string.IsNullOrEmpty(Model.Tour.HourDuration);
                            bool additionalInformationExists = !string.IsNullOrEmpty(Model.Tour.AdditionalInformation);

                            if (priceExists)
                            {
                                foreach (var price in Model.Tour.TourPrices)
                                {
                                    tripInformationValues.Add(new Tuple<string, string>("fa-money-check-dollar", $"${price.Price} {price.Title}{(price.Description != null ? $" {price.Description}" : "")}"));
                                }
                            }

                            if (dayDurationExists || nightDurationExists || hourDurationExists)
                            {
                                string duration = "";
                                if (dayDurationExists)
                                    duration += $"{Model.Tour.DayDuration} Day{(Model.Tour.DayDuration != "1" ? "s" : "")}";

                                if (nightDurationExists)
                                    duration += $"{(dayDurationExists ? " " : "")}{Model.Tour.NightDuration} Night{(Model.Tour.NightDuration != "1" ? "s" : "")}";

                                if (hourDurationExists)
                                    duration += $"{(dayDurationExists ? " " : "")}{Model.Tour.HourDuration} Hour{(Model.Tour.HourDuration != "1" ? "s" : "")}";

                                tripInformationValues.Add(new Tuple<string, string>("fa-clock", duration));
                            }

                            if (minCapacityExists || maxCapacityExists)
                            {
                                if (minCapacityExists)
                                    tripInformationValues.Add(new Tuple<string, string>("fa-user-group", $"Min {Model.Tour.MinCapacity} persons"));

                                if (maxCapacityExists)
                                    tripInformationValues.Add(new Tuple<string, string>("fa-user-group", $"Max {Model.Tour.MaxCapacity} persons"));
                            }

                            if (addressExists)
                                tripInformationValues.Add(new Tuple<string, string>("fa-location-pin", Model.Tour.Address));

                            if (additionalInformationExists)
                                tripInformationValues.Add(new Tuple<string, string>("fa-circle-info", Model.Tour.AdditionalInformation));

                            if (tripInformationValues.Count > 0)
                            {
                                var index = 0;
                                var valuesCount = tripInformationValues.Count;

                                <div class="row">
                                    @foreach (var tripInformationValue in tripInformationValues)
                                    {
                                        var cssClass = "col-lg-12";
                                        <div class="@cssClass mb-2">
                                            <span class="badge bg-primary-dark text-white p-2 w-100"><i class="fas @tripInformationValue.Item1 dark-grey-text" aria-hidden="true"></i> @tripInformationValue.Item2</span>
                                        </div>

                                        index++;
                                    }
                                </div>

                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 mb-4 has-parallax-scroll">
                <p class="text-muted mb-4">@Html.Raw(Model.Tour.Description)</p>

                @if (!string.IsNullOrEmpty(Model.Tour.WhatsIncluded))
                {
                    <span class="mb-2 d-block"><strong>What's Included?</strong></span>

                    @Html.Raw(Model.Tour.WhatsIncluded)
                }

                @if (!string.IsNullOrEmpty(Model.Tour.WhatsNotIncluded))
                {
                    <span class="mb-2 d-block"><strong>What's not Included?</strong></span>

                    @Html.Raw(Model.Tour.WhatsNotIncluded)
                }
            </div>
        </div>
    </div>

    if (Model.Tour.TourItineraries != null && Model.Tour.TourItineraries.Any())
    {
        foreach (var itinerary in Model.Tour.TourItineraries)
        {
            <div class="container-fluid p-0">
                <h3 class="text-white w-100 text-center m-0 py-2 position-relative bg-primary-dark" style="z-index:2"><strong class="has-parallax-scroll">@itinerary.Header</strong></h3>
                <div class="container">
                    <div class="row">
                        @if (itinerary.Sections != null && itinerary.Sections.Count() == 1)
                        {
                            var itinerarySection = itinerary.Sections.First();
                            <partial name="Shared/_ItinerarySectionFullWidthPartial" model="@itinerarySection" />
                        }
                        else
                        {
                            <div class="main-timeline-2 py-5">
                                @{
                                    var alignment = "left-2";
                                    foreach (var itinerarySection in itinerary.Sections)
                                    {
                                        <div class="timeline-2 @alignment has-parallax-scroll">
                                            <partial name="Shared/_ItinerarySectionPartial" model="itinerarySection" />
                                        </div>

                                        if (alignment == "left-2")
                                            alignment = "right-2";
                                        else
                                            alignment = "left-2";
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    }
    if (Model.RelatedToursCards != null)
    {
        <section id="relatedTours" class="pb-5 position-relative text-center bg-light">
            @Html.DisplayFor(x => x.RelatedToursCards)
        </section>
    }
}

@Html.DisplayFor(x => x.EnquireNowComponent)
